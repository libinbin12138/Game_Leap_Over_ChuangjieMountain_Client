// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dafuwen.proto

#include "dafuwen.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dafuwenprotobuf {
PROTOBUF_CONSTEXPR Protobuf_RsaPubKey::Protobuf_RsaPubKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pubkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encontent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hashcontent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flag_)*/0
  , /*decltype(_impl_.encontentsize_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Protobuf_RsaPubKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Protobuf_RsaPubKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Protobuf_RsaPubKeyDefaultTypeInternal() {}
  union {
    Protobuf_RsaPubKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Protobuf_RsaPubKeyDefaultTypeInternal _Protobuf_RsaPubKey_default_instance_;
PROTOBUF_CONSTEXPR Room_Info::Room_Info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_pwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_aeskey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_id_)*/0
  , /*decltype(_impl_.room_maxnum_)*/0
  , /*decltype(_impl_.room_flag_)*/0
  , /*decltype(_impl_.player_order_)*/0
  , /*decltype(_impl_.player_touxiangflag_)*/0
  , /*decltype(_impl_.cfd_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Room_InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Room_InfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Room_InfoDefaultTypeInternal() {}
  union {
    Room_Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Room_InfoDefaultTypeInternal _Room_Info_default_instance_;
}  // namespace dafuwenprotobuf
static ::_pb::Metadata file_level_metadata_dafuwen_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dafuwen_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dafuwen_2eproto = nullptr;

const uint32_t TableStruct_dafuwen_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Protobuf_RsaPubKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Protobuf_RsaPubKey, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Protobuf_RsaPubKey, _impl_.encontentsize_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Protobuf_RsaPubKey, _impl_.pubkey_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Protobuf_RsaPubKey, _impl_.encontent_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Protobuf_RsaPubKey, _impl_.hashcontent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Room_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Room_Info, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Room_Info, _impl_.room_name_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Room_Info, _impl_.room_description_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Room_Info, _impl_.room_maxnum_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Room_Info, _impl_.room_flag_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Room_Info, _impl_.room_pwd_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Room_Info, _impl_.room_aeskey_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Room_Info, _impl_.player_order_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Room_Info, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Room_Info, _impl_.player_touxiangflag_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Room_Info, _impl_.cfd_),
  PROTOBUF_FIELD_OFFSET(::dafuwenprotobuf::Room_Info, _impl_.ip_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dafuwenprotobuf::Protobuf_RsaPubKey)},
  { 11, -1, -1, sizeof(::dafuwenprotobuf::Room_Info)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dafuwenprotobuf::_Protobuf_RsaPubKey_default_instance_._instance,
  &::dafuwenprotobuf::_Room_Info_default_instance_._instance,
};

const char descriptor_table_protodef_dafuwen_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rdafuwen.proto\022\017dafuwenprotobuf\"q\n\022Prot"
  "obuf_RsaPubKey\022\014\n\004flag\030\001 \001(\005\022\025\n\rEnconten"
  "tSize\030\002 \001(\005\022\016\n\006PubKey\030\003 \001(\014\022\021\n\tEncontent"
  "\030\004 \001(\014\022\023\n\013Hashcontent\030\005 \001(\014\"\371\001\n\tRoom_Inf"
  "o\022\017\n\007Room_ID\030\001 \001(\005\022\021\n\tRoom_Name\030\002 \001(\014\022\030\n"
  "\020Room_Description\030\003 \001(\014\022\023\n\013Room_Maxnum\030\004"
  " \001(\005\022\021\n\tRoom_Flag\030\005 \001(\005\022\020\n\010Room_Pwd\030\006 \001("
  "\014\022\023\n\013Room_AesKey\030\007 \001(\014\022\024\n\014Player_Order\030\010"
  " \001(\005\022\023\n\013Player_Name\030\t \001(\014\022\033\n\023Player_Toux"
  "iangFlag\030\n \001(\005\022\013\n\003cfd\030\013 \001(\005\022\n\n\002IP\030\014 \001(\014b"
  "\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_dafuwen_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dafuwen_2eproto = {
    false, false, 407, descriptor_table_protodef_dafuwen_2eproto,
    "dafuwen.proto",
    &descriptor_table_dafuwen_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_dafuwen_2eproto::offsets,
    file_level_metadata_dafuwen_2eproto, file_level_enum_descriptors_dafuwen_2eproto,
    file_level_service_descriptors_dafuwen_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dafuwen_2eproto_getter() {
  return &descriptor_table_dafuwen_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dafuwen_2eproto(&descriptor_table_dafuwen_2eproto);
namespace dafuwenprotobuf {

// ===================================================================

class Protobuf_RsaPubKey::_Internal {
 public:
};

Protobuf_RsaPubKey::Protobuf_RsaPubKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dafuwenprotobuf.Protobuf_RsaPubKey)
}
Protobuf_RsaPubKey::Protobuf_RsaPubKey(const Protobuf_RsaPubKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Protobuf_RsaPubKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pubkey_){}
    , decltype(_impl_.encontent_){}
    , decltype(_impl_.hashcontent_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.encontentsize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pubkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pubkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pubkey().empty()) {
    _this->_impl_.pubkey_.Set(from._internal_pubkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encontent().empty()) {
    _this->_impl_.encontent_.Set(from._internal_encontent(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hashcontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hashcontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hashcontent().empty()) {
    _this->_impl_.hashcontent_.Set(from._internal_hashcontent(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.flag_, &from._impl_.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.encontentsize_) -
    reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.encontentsize_));
  // @@protoc_insertion_point(copy_constructor:dafuwenprotobuf.Protobuf_RsaPubKey)
}

inline void Protobuf_RsaPubKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pubkey_){}
    , decltype(_impl_.encontent_){}
    , decltype(_impl_.hashcontent_){}
    , decltype(_impl_.flag_){0}
    , decltype(_impl_.encontentsize_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pubkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pubkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hashcontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hashcontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Protobuf_RsaPubKey::~Protobuf_RsaPubKey() {
  // @@protoc_insertion_point(destructor:dafuwenprotobuf.Protobuf_RsaPubKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Protobuf_RsaPubKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pubkey_.Destroy();
  _impl_.encontent_.Destroy();
  _impl_.hashcontent_.Destroy();
}

void Protobuf_RsaPubKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Protobuf_RsaPubKey::Clear() {
// @@protoc_insertion_point(message_clear_start:dafuwenprotobuf.Protobuf_RsaPubKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pubkey_.ClearToEmpty();
  _impl_.encontent_.ClearToEmpty();
  _impl_.hashcontent_.ClearToEmpty();
  ::memset(&_impl_.flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.encontentsize_) -
      reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.encontentsize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Protobuf_RsaPubKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 EncontentSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.encontentsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes PubKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Encontent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_encontent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Hashcontent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hashcontent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Protobuf_RsaPubKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dafuwenprotobuf.Protobuf_RsaPubKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_flag(), target);
  }

  // int32 EncontentSize = 2;
  if (this->_internal_encontentsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_encontentsize(), target);
  }

  // bytes PubKey = 3;
  if (!this->_internal_pubkey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pubkey(), target);
  }

  // bytes Encontent = 4;
  if (!this->_internal_encontent().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_encontent(), target);
  }

  // bytes Hashcontent = 5;
  if (!this->_internal_hashcontent().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_hashcontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dafuwenprotobuf.Protobuf_RsaPubKey)
  return target;
}

size_t Protobuf_RsaPubKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dafuwenprotobuf.Protobuf_RsaPubKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes PubKey = 3;
  if (!this->_internal_pubkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // bytes Encontent = 4;
  if (!this->_internal_encontent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encontent());
  }

  // bytes Hashcontent = 5;
  if (!this->_internal_hashcontent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hashcontent());
  }

  // int32 flag = 1;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flag());
  }

  // int32 EncontentSize = 2;
  if (this->_internal_encontentsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_encontentsize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Protobuf_RsaPubKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Protobuf_RsaPubKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Protobuf_RsaPubKey::GetClassData() const { return &_class_data_; }


void Protobuf_RsaPubKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Protobuf_RsaPubKey*>(&to_msg);
  auto& from = static_cast<const Protobuf_RsaPubKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dafuwenprotobuf.Protobuf_RsaPubKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pubkey().empty()) {
    _this->_internal_set_pubkey(from._internal_pubkey());
  }
  if (!from._internal_encontent().empty()) {
    _this->_internal_set_encontent(from._internal_encontent());
  }
  if (!from._internal_hashcontent().empty()) {
    _this->_internal_set_hashcontent(from._internal_hashcontent());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_encontentsize() != 0) {
    _this->_internal_set_encontentsize(from._internal_encontentsize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Protobuf_RsaPubKey::CopyFrom(const Protobuf_RsaPubKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dafuwenprotobuf.Protobuf_RsaPubKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Protobuf_RsaPubKey::IsInitialized() const {
  return true;
}

void Protobuf_RsaPubKey::InternalSwap(Protobuf_RsaPubKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pubkey_, lhs_arena,
      &other->_impl_.pubkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encontent_, lhs_arena,
      &other->_impl_.encontent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hashcontent_, lhs_arena,
      &other->_impl_.hashcontent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Protobuf_RsaPubKey, _impl_.encontentsize_)
      + sizeof(Protobuf_RsaPubKey::_impl_.encontentsize_)
      - PROTOBUF_FIELD_OFFSET(Protobuf_RsaPubKey, _impl_.flag_)>(
          reinterpret_cast<char*>(&_impl_.flag_),
          reinterpret_cast<char*>(&other->_impl_.flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Protobuf_RsaPubKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dafuwen_2eproto_getter, &descriptor_table_dafuwen_2eproto_once,
      file_level_metadata_dafuwen_2eproto[0]);
}

// ===================================================================

class Room_Info::_Internal {
 public:
};

Room_Info::Room_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dafuwenprotobuf.Room_Info)
}
Room_Info::Room_Info(const Room_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Room_Info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_name_){}
    , decltype(_impl_.room_description_){}
    , decltype(_impl_.room_pwd_){}
    , decltype(_impl_.room_aeskey_){}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.room_maxnum_){}
    , decltype(_impl_.room_flag_){}
    , decltype(_impl_.player_order_){}
    , decltype(_impl_.player_touxiangflag_){}
    , decltype(_impl_.cfd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_description().empty()) {
    _this->_impl_.room_description_.Set(from._internal_room_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_pwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_pwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_pwd().empty()) {
    _this->_impl_.room_pwd_.Set(from._internal_room_pwd(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_aeskey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_aeskey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_aeskey().empty()) {
    _this->_impl_.room_aeskey_.Set(from._internal_room_aeskey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.room_id_, &from._impl_.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cfd_) -
    reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.cfd_));
  // @@protoc_insertion_point(copy_constructor:dafuwenprotobuf.Room_Info)
}

inline void Room_Info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_name_){}
    , decltype(_impl_.room_description_){}
    , decltype(_impl_.room_pwd_){}
    , decltype(_impl_.room_aeskey_){}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.room_id_){0}
    , decltype(_impl_.room_maxnum_){0}
    , decltype(_impl_.room_flag_){0}
    , decltype(_impl_.player_order_){0}
    , decltype(_impl_.player_touxiangflag_){0}
    , decltype(_impl_.cfd_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_pwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_pwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_aeskey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_aeskey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Room_Info::~Room_Info() {
  // @@protoc_insertion_point(destructor:dafuwenprotobuf.Room_Info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Room_Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_name_.Destroy();
  _impl_.room_description_.Destroy();
  _impl_.room_pwd_.Destroy();
  _impl_.room_aeskey_.Destroy();
  _impl_.player_name_.Destroy();
  _impl_.ip_.Destroy();
}

void Room_Info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Room_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:dafuwenprotobuf.Room_Info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_name_.ClearToEmpty();
  _impl_.room_description_.ClearToEmpty();
  _impl_.room_pwd_.ClearToEmpty();
  _impl_.room_aeskey_.ClearToEmpty();
  _impl_.player_name_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  ::memset(&_impl_.room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cfd_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.cfd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Room_Info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Room_ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Room_Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Room_Description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_room_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Room_Maxnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.room_maxnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Room_Flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.room_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Room_Pwd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_room_pwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Room_AesKey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_room_aeskey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Player_Order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.player_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Player_Name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Player_TouxiangFlag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.player_touxiangflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cfd = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.cfd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes IP = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Room_Info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dafuwenprotobuf.Room_Info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Room_ID = 1;
  if (this->_internal_room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_room_id(), target);
  }

  // bytes Room_Name = 2;
  if (!this->_internal_room_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_room_name(), target);
  }

  // bytes Room_Description = 3;
  if (!this->_internal_room_description().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_room_description(), target);
  }

  // int32 Room_Maxnum = 4;
  if (this->_internal_room_maxnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_room_maxnum(), target);
  }

  // int32 Room_Flag = 5;
  if (this->_internal_room_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_room_flag(), target);
  }

  // bytes Room_Pwd = 6;
  if (!this->_internal_room_pwd().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_room_pwd(), target);
  }

  // bytes Room_AesKey = 7;
  if (!this->_internal_room_aeskey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_room_aeskey(), target);
  }

  // int32 Player_Order = 8;
  if (this->_internal_player_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_player_order(), target);
  }

  // bytes Player_Name = 9;
  if (!this->_internal_player_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_player_name(), target);
  }

  // int32 Player_TouxiangFlag = 10;
  if (this->_internal_player_touxiangflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_player_touxiangflag(), target);
  }

  // int32 cfd = 11;
  if (this->_internal_cfd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_cfd(), target);
  }

  // bytes IP = 12;
  if (!this->_internal_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dafuwenprotobuf.Room_Info)
  return target;
}

size_t Room_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dafuwenprotobuf.Room_Info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Room_Name = 2;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_room_name());
  }

  // bytes Room_Description = 3;
  if (!this->_internal_room_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_room_description());
  }

  // bytes Room_Pwd = 6;
  if (!this->_internal_room_pwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_room_pwd());
  }

  // bytes Room_AesKey = 7;
  if (!this->_internal_room_aeskey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_room_aeskey());
  }

  // bytes Player_Name = 9;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_player_name());
  }

  // bytes IP = 12;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  // int32 Room_ID = 1;
  if (this->_internal_room_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_room_id());
  }

  // int32 Room_Maxnum = 4;
  if (this->_internal_room_maxnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_room_maxnum());
  }

  // int32 Room_Flag = 5;
  if (this->_internal_room_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_room_flag());
  }

  // int32 Player_Order = 8;
  if (this->_internal_player_order() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_order());
  }

  // int32 Player_TouxiangFlag = 10;
  if (this->_internal_player_touxiangflag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_touxiangflag());
  }

  // int32 cfd = 11;
  if (this->_internal_cfd() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cfd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Room_Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Room_Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Room_Info::GetClassData() const { return &_class_data_; }


void Room_Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Room_Info*>(&to_msg);
  auto& from = static_cast<const Room_Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dafuwenprotobuf.Room_Info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_room_description().empty()) {
    _this->_internal_set_room_description(from._internal_room_description());
  }
  if (!from._internal_room_pwd().empty()) {
    _this->_internal_set_room_pwd(from._internal_room_pwd());
  }
  if (!from._internal_room_aeskey().empty()) {
    _this->_internal_set_room_aeskey(from._internal_room_aeskey());
  }
  if (!from._internal_player_name().empty()) {
    _this->_internal_set_player_name(from._internal_player_name());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_room_id() != 0) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_room_maxnum() != 0) {
    _this->_internal_set_room_maxnum(from._internal_room_maxnum());
  }
  if (from._internal_room_flag() != 0) {
    _this->_internal_set_room_flag(from._internal_room_flag());
  }
  if (from._internal_player_order() != 0) {
    _this->_internal_set_player_order(from._internal_player_order());
  }
  if (from._internal_player_touxiangflag() != 0) {
    _this->_internal_set_player_touxiangflag(from._internal_player_touxiangflag());
  }
  if (from._internal_cfd() != 0) {
    _this->_internal_set_cfd(from._internal_cfd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Room_Info::CopyFrom(const Room_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dafuwenprotobuf.Room_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_Info::IsInitialized() const {
  return true;
}

void Room_Info::InternalSwap(Room_Info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_name_, lhs_arena,
      &other->_impl_.room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_description_, lhs_arena,
      &other->_impl_.room_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_pwd_, lhs_arena,
      &other->_impl_.room_pwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_aeskey_, lhs_arena,
      &other->_impl_.room_aeskey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Room_Info, _impl_.cfd_)
      + sizeof(Room_Info::_impl_.cfd_)
      - PROTOBUF_FIELD_OFFSET(Room_Info, _impl_.room_id_)>(
          reinterpret_cast<char*>(&_impl_.room_id_),
          reinterpret_cast<char*>(&other->_impl_.room_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Room_Info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dafuwen_2eproto_getter, &descriptor_table_dafuwen_2eproto_once,
      file_level_metadata_dafuwen_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dafuwenprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dafuwenprotobuf::Protobuf_RsaPubKey*
Arena::CreateMaybeMessage< ::dafuwenprotobuf::Protobuf_RsaPubKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dafuwenprotobuf::Protobuf_RsaPubKey >(arena);
}
template<> PROTOBUF_NOINLINE ::dafuwenprotobuf::Room_Info*
Arena::CreateMaybeMessage< ::dafuwenprotobuf::Room_Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dafuwenprotobuf::Room_Info >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
