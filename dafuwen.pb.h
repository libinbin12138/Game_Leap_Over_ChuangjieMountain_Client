// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dafuwen.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dafuwen_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dafuwen_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dafuwen_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dafuwen_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dafuwen_2eproto;
namespace dafuwenprotobuf {
class Protobuf_RsaPubKey;
struct Protobuf_RsaPubKeyDefaultTypeInternal;
extern Protobuf_RsaPubKeyDefaultTypeInternal _Protobuf_RsaPubKey_default_instance_;
class Room_Info;
struct Room_InfoDefaultTypeInternal;
extern Room_InfoDefaultTypeInternal _Room_Info_default_instance_;
}  // namespace dafuwenprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::dafuwenprotobuf::Protobuf_RsaPubKey* Arena::CreateMaybeMessage<::dafuwenprotobuf::Protobuf_RsaPubKey>(Arena*);
template<> ::dafuwenprotobuf::Room_Info* Arena::CreateMaybeMessage<::dafuwenprotobuf::Room_Info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dafuwenprotobuf {

// ===================================================================

class Protobuf_RsaPubKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dafuwenprotobuf.Protobuf_RsaPubKey) */ {
 public:
  inline Protobuf_RsaPubKey() : Protobuf_RsaPubKey(nullptr) {}
  ~Protobuf_RsaPubKey() override;
  explicit PROTOBUF_CONSTEXPR Protobuf_RsaPubKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Protobuf_RsaPubKey(const Protobuf_RsaPubKey& from);
  Protobuf_RsaPubKey(Protobuf_RsaPubKey&& from) noexcept
    : Protobuf_RsaPubKey() {
    *this = ::std::move(from);
  }

  inline Protobuf_RsaPubKey& operator=(const Protobuf_RsaPubKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline Protobuf_RsaPubKey& operator=(Protobuf_RsaPubKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Protobuf_RsaPubKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const Protobuf_RsaPubKey* internal_default_instance() {
    return reinterpret_cast<const Protobuf_RsaPubKey*>(
               &_Protobuf_RsaPubKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Protobuf_RsaPubKey& a, Protobuf_RsaPubKey& b) {
    a.Swap(&b);
  }
  inline void Swap(Protobuf_RsaPubKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Protobuf_RsaPubKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Protobuf_RsaPubKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Protobuf_RsaPubKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Protobuf_RsaPubKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Protobuf_RsaPubKey& from) {
    Protobuf_RsaPubKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Protobuf_RsaPubKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dafuwenprotobuf.Protobuf_RsaPubKey";
  }
  protected:
  explicit Protobuf_RsaPubKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyFieldNumber = 3,
    kEncontentFieldNumber = 4,
    kHashcontentFieldNumber = 5,
    kFlagFieldNumber = 1,
    kEncontentSizeFieldNumber = 2,
  };
  // bytes PubKey = 3;
  void clear_pubkey();
  const std::string& pubkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pubkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pubkey();
  PROTOBUF_NODISCARD std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // bytes Encontent = 4;
  void clear_encontent();
  const std::string& encontent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encontent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encontent();
  PROTOBUF_NODISCARD std::string* release_encontent();
  void set_allocated_encontent(std::string* encontent);
  private:
  const std::string& _internal_encontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encontent(const std::string& value);
  std::string* _internal_mutable_encontent();
  public:

  // bytes Hashcontent = 5;
  void clear_hashcontent();
  const std::string& hashcontent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hashcontent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hashcontent();
  PROTOBUF_NODISCARD std::string* release_hashcontent();
  void set_allocated_hashcontent(std::string* hashcontent);
  private:
  const std::string& _internal_hashcontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hashcontent(const std::string& value);
  std::string* _internal_mutable_hashcontent();
  public:

  // int32 flag = 1;
  void clear_flag();
  int32_t flag() const;
  void set_flag(int32_t value);
  private:
  int32_t _internal_flag() const;
  void _internal_set_flag(int32_t value);
  public:

  // int32 EncontentSize = 2;
  void clear_encontentsize();
  int32_t encontentsize() const;
  void set_encontentsize(int32_t value);
  private:
  int32_t _internal_encontentsize() const;
  void _internal_set_encontentsize(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dafuwenprotobuf.Protobuf_RsaPubKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encontent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashcontent_;
    int32_t flag_;
    int32_t encontentsize_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dafuwen_2eproto;
};
// -------------------------------------------------------------------

class Room_Info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dafuwenprotobuf.Room_Info) */ {
 public:
  inline Room_Info() : Room_Info(nullptr) {}
  ~Room_Info() override;
  explicit PROTOBUF_CONSTEXPR Room_Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Room_Info(const Room_Info& from);
  Room_Info(Room_Info&& from) noexcept
    : Room_Info() {
    *this = ::std::move(from);
  }

  inline Room_Info& operator=(const Room_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Room_Info& operator=(Room_Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Room_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const Room_Info* internal_default_instance() {
    return reinterpret_cast<const Room_Info*>(
               &_Room_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Room_Info& a, Room_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(Room_Info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Room_Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Room_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Room_Info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Room_Info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Room_Info& from) {
    Room_Info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Room_Info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dafuwenprotobuf.Room_Info";
  }
  protected:
  explicit Room_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 2,
    kRoomDescriptionFieldNumber = 3,
    kRoomPwdFieldNumber = 6,
    kRoomAesKeyFieldNumber = 7,
    kPlayerNameFieldNumber = 9,
    kIPFieldNumber = 12,
    kRoomIDFieldNumber = 1,
    kRoomMaxnumFieldNumber = 4,
    kRoomFlagFieldNumber = 5,
    kPlayerOrderFieldNumber = 8,
    kPlayerTouxiangFlagFieldNumber = 10,
    kCfdFieldNumber = 11,
  };
  // bytes Room_Name = 2;
  void clear_room_name();
  const std::string& room_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* room_name);
  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(const std::string& value);
  std::string* _internal_mutable_room_name();
  public:

  // bytes Room_Description = 3;
  void clear_room_description();
  const std::string& room_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_description();
  PROTOBUF_NODISCARD std::string* release_room_description();
  void set_allocated_room_description(std::string* room_description);
  private:
  const std::string& _internal_room_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_description(const std::string& value);
  std::string* _internal_mutable_room_description();
  public:

  // bytes Room_Pwd = 6;
  void clear_room_pwd();
  const std::string& room_pwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_pwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_pwd();
  PROTOBUF_NODISCARD std::string* release_room_pwd();
  void set_allocated_room_pwd(std::string* room_pwd);
  private:
  const std::string& _internal_room_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_pwd(const std::string& value);
  std::string* _internal_mutable_room_pwd();
  public:

  // bytes Room_AesKey = 7;
  void clear_room_aeskey();
  const std::string& room_aeskey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_aeskey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_aeskey();
  PROTOBUF_NODISCARD std::string* release_room_aeskey();
  void set_allocated_room_aeskey(std::string* room_aeskey);
  private:
  const std::string& _internal_room_aeskey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_aeskey(const std::string& value);
  std::string* _internal_mutable_room_aeskey();
  public:

  // bytes Player_Name = 9;
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // bytes IP = 12;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 Room_ID = 1;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // int32 Room_Maxnum = 4;
  void clear_room_maxnum();
  int32_t room_maxnum() const;
  void set_room_maxnum(int32_t value);
  private:
  int32_t _internal_room_maxnum() const;
  void _internal_set_room_maxnum(int32_t value);
  public:

  // int32 Room_Flag = 5;
  void clear_room_flag();
  int32_t room_flag() const;
  void set_room_flag(int32_t value);
  private:
  int32_t _internal_room_flag() const;
  void _internal_set_room_flag(int32_t value);
  public:

  // int32 Player_Order = 8;
  void clear_player_order();
  int32_t player_order() const;
  void set_player_order(int32_t value);
  private:
  int32_t _internal_player_order() const;
  void _internal_set_player_order(int32_t value);
  public:

  // int32 Player_TouxiangFlag = 10;
  void clear_player_touxiangflag();
  int32_t player_touxiangflag() const;
  void set_player_touxiangflag(int32_t value);
  private:
  int32_t _internal_player_touxiangflag() const;
  void _internal_set_player_touxiangflag(int32_t value);
  public:

  // int32 cfd = 11;
  void clear_cfd();
  int32_t cfd() const;
  void set_cfd(int32_t value);
  private:
  int32_t _internal_cfd() const;
  void _internal_set_cfd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dafuwenprotobuf.Room_Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_pwd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_aeskey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int32_t room_id_;
    int32_t room_maxnum_;
    int32_t room_flag_;
    int32_t player_order_;
    int32_t player_touxiangflag_;
    int32_t cfd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dafuwen_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Protobuf_RsaPubKey

// int32 flag = 1;
inline void Protobuf_RsaPubKey::clear_flag() {
  _impl_.flag_ = 0;
}
inline int32_t Protobuf_RsaPubKey::_internal_flag() const {
  return _impl_.flag_;
}
inline int32_t Protobuf_RsaPubKey::flag() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Protobuf_RsaPubKey.flag)
  return _internal_flag();
}
inline void Protobuf_RsaPubKey::_internal_set_flag(int32_t value) {
  
  _impl_.flag_ = value;
}
inline void Protobuf_RsaPubKey::set_flag(int32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Protobuf_RsaPubKey.flag)
}

// int32 EncontentSize = 2;
inline void Protobuf_RsaPubKey::clear_encontentsize() {
  _impl_.encontentsize_ = 0;
}
inline int32_t Protobuf_RsaPubKey::_internal_encontentsize() const {
  return _impl_.encontentsize_;
}
inline int32_t Protobuf_RsaPubKey::encontentsize() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Protobuf_RsaPubKey.EncontentSize)
  return _internal_encontentsize();
}
inline void Protobuf_RsaPubKey::_internal_set_encontentsize(int32_t value) {
  
  _impl_.encontentsize_ = value;
}
inline void Protobuf_RsaPubKey::set_encontentsize(int32_t value) {
  _internal_set_encontentsize(value);
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Protobuf_RsaPubKey.EncontentSize)
}

// bytes PubKey = 3;
inline void Protobuf_RsaPubKey::clear_pubkey() {
  _impl_.pubkey_.ClearToEmpty();
}
inline const std::string& Protobuf_RsaPubKey::pubkey() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Protobuf_RsaPubKey.PubKey)
  return _internal_pubkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Protobuf_RsaPubKey::set_pubkey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pubkey_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Protobuf_RsaPubKey.PubKey)
}
inline std::string* Protobuf_RsaPubKey::mutable_pubkey() {
  std::string* _s = _internal_mutable_pubkey();
  // @@protoc_insertion_point(field_mutable:dafuwenprotobuf.Protobuf_RsaPubKey.PubKey)
  return _s;
}
inline const std::string& Protobuf_RsaPubKey::_internal_pubkey() const {
  return _impl_.pubkey_.Get();
}
inline void Protobuf_RsaPubKey::_internal_set_pubkey(const std::string& value) {
  
  _impl_.pubkey_.Set(value, GetArenaForAllocation());
}
inline std::string* Protobuf_RsaPubKey::_internal_mutable_pubkey() {
  
  return _impl_.pubkey_.Mutable(GetArenaForAllocation());
}
inline std::string* Protobuf_RsaPubKey::release_pubkey() {
  // @@protoc_insertion_point(field_release:dafuwenprotobuf.Protobuf_RsaPubKey.PubKey)
  return _impl_.pubkey_.Release();
}
inline void Protobuf_RsaPubKey::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  _impl_.pubkey_.SetAllocated(pubkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pubkey_.IsDefault()) {
    _impl_.pubkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dafuwenprotobuf.Protobuf_RsaPubKey.PubKey)
}

// bytes Encontent = 4;
inline void Protobuf_RsaPubKey::clear_encontent() {
  _impl_.encontent_.ClearToEmpty();
}
inline const std::string& Protobuf_RsaPubKey::encontent() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Protobuf_RsaPubKey.Encontent)
  return _internal_encontent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Protobuf_RsaPubKey::set_encontent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encontent_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Protobuf_RsaPubKey.Encontent)
}
inline std::string* Protobuf_RsaPubKey::mutable_encontent() {
  std::string* _s = _internal_mutable_encontent();
  // @@protoc_insertion_point(field_mutable:dafuwenprotobuf.Protobuf_RsaPubKey.Encontent)
  return _s;
}
inline const std::string& Protobuf_RsaPubKey::_internal_encontent() const {
  return _impl_.encontent_.Get();
}
inline void Protobuf_RsaPubKey::_internal_set_encontent(const std::string& value) {
  
  _impl_.encontent_.Set(value, GetArenaForAllocation());
}
inline std::string* Protobuf_RsaPubKey::_internal_mutable_encontent() {
  
  return _impl_.encontent_.Mutable(GetArenaForAllocation());
}
inline std::string* Protobuf_RsaPubKey::release_encontent() {
  // @@protoc_insertion_point(field_release:dafuwenprotobuf.Protobuf_RsaPubKey.Encontent)
  return _impl_.encontent_.Release();
}
inline void Protobuf_RsaPubKey::set_allocated_encontent(std::string* encontent) {
  if (encontent != nullptr) {
    
  } else {
    
  }
  _impl_.encontent_.SetAllocated(encontent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encontent_.IsDefault()) {
    _impl_.encontent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dafuwenprotobuf.Protobuf_RsaPubKey.Encontent)
}

// bytes Hashcontent = 5;
inline void Protobuf_RsaPubKey::clear_hashcontent() {
  _impl_.hashcontent_.ClearToEmpty();
}
inline const std::string& Protobuf_RsaPubKey::hashcontent() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Protobuf_RsaPubKey.Hashcontent)
  return _internal_hashcontent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Protobuf_RsaPubKey::set_hashcontent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hashcontent_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Protobuf_RsaPubKey.Hashcontent)
}
inline std::string* Protobuf_RsaPubKey::mutable_hashcontent() {
  std::string* _s = _internal_mutable_hashcontent();
  // @@protoc_insertion_point(field_mutable:dafuwenprotobuf.Protobuf_RsaPubKey.Hashcontent)
  return _s;
}
inline const std::string& Protobuf_RsaPubKey::_internal_hashcontent() const {
  return _impl_.hashcontent_.Get();
}
inline void Protobuf_RsaPubKey::_internal_set_hashcontent(const std::string& value) {
  
  _impl_.hashcontent_.Set(value, GetArenaForAllocation());
}
inline std::string* Protobuf_RsaPubKey::_internal_mutable_hashcontent() {
  
  return _impl_.hashcontent_.Mutable(GetArenaForAllocation());
}
inline std::string* Protobuf_RsaPubKey::release_hashcontent() {
  // @@protoc_insertion_point(field_release:dafuwenprotobuf.Protobuf_RsaPubKey.Hashcontent)
  return _impl_.hashcontent_.Release();
}
inline void Protobuf_RsaPubKey::set_allocated_hashcontent(std::string* hashcontent) {
  if (hashcontent != nullptr) {
    
  } else {
    
  }
  _impl_.hashcontent_.SetAllocated(hashcontent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hashcontent_.IsDefault()) {
    _impl_.hashcontent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dafuwenprotobuf.Protobuf_RsaPubKey.Hashcontent)
}

// -------------------------------------------------------------------

// Room_Info

// int32 Room_ID = 1;
inline void Room_Info::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t Room_Info::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t Room_Info::room_id() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Room_Info.Room_ID)
  return _internal_room_id();
}
inline void Room_Info::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void Room_Info::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Room_Info.Room_ID)
}

// bytes Room_Name = 2;
inline void Room_Info::clear_room_name() {
  _impl_.room_name_.ClearToEmpty();
}
inline const std::string& Room_Info::room_name() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Room_Info.Room_Name)
  return _internal_room_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Room_Info::set_room_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Room_Info.Room_Name)
}
inline std::string* Room_Info::mutable_room_name() {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:dafuwenprotobuf.Room_Info.Room_Name)
  return _s;
}
inline const std::string& Room_Info::_internal_room_name() const {
  return _impl_.room_name_.Get();
}
inline void Room_Info::_internal_set_room_name(const std::string& value) {
  
  _impl_.room_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Room_Info::_internal_mutable_room_name() {
  
  return _impl_.room_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Room_Info::release_room_name() {
  // @@protoc_insertion_point(field_release:dafuwenprotobuf.Room_Info.Room_Name)
  return _impl_.room_name_.Release();
}
inline void Room_Info::set_allocated_room_name(std::string* room_name) {
  if (room_name != nullptr) {
    
  } else {
    
  }
  _impl_.room_name_.SetAllocated(room_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_name_.IsDefault()) {
    _impl_.room_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dafuwenprotobuf.Room_Info.Room_Name)
}

// bytes Room_Description = 3;
inline void Room_Info::clear_room_description() {
  _impl_.room_description_.ClearToEmpty();
}
inline const std::string& Room_Info::room_description() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Room_Info.Room_Description)
  return _internal_room_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Room_Info::set_room_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_description_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Room_Info.Room_Description)
}
inline std::string* Room_Info::mutable_room_description() {
  std::string* _s = _internal_mutable_room_description();
  // @@protoc_insertion_point(field_mutable:dafuwenprotobuf.Room_Info.Room_Description)
  return _s;
}
inline const std::string& Room_Info::_internal_room_description() const {
  return _impl_.room_description_.Get();
}
inline void Room_Info::_internal_set_room_description(const std::string& value) {
  
  _impl_.room_description_.Set(value, GetArenaForAllocation());
}
inline std::string* Room_Info::_internal_mutable_room_description() {
  
  return _impl_.room_description_.Mutable(GetArenaForAllocation());
}
inline std::string* Room_Info::release_room_description() {
  // @@protoc_insertion_point(field_release:dafuwenprotobuf.Room_Info.Room_Description)
  return _impl_.room_description_.Release();
}
inline void Room_Info::set_allocated_room_description(std::string* room_description) {
  if (room_description != nullptr) {
    
  } else {
    
  }
  _impl_.room_description_.SetAllocated(room_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_description_.IsDefault()) {
    _impl_.room_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dafuwenprotobuf.Room_Info.Room_Description)
}

// int32 Room_Maxnum = 4;
inline void Room_Info::clear_room_maxnum() {
  _impl_.room_maxnum_ = 0;
}
inline int32_t Room_Info::_internal_room_maxnum() const {
  return _impl_.room_maxnum_;
}
inline int32_t Room_Info::room_maxnum() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Room_Info.Room_Maxnum)
  return _internal_room_maxnum();
}
inline void Room_Info::_internal_set_room_maxnum(int32_t value) {
  
  _impl_.room_maxnum_ = value;
}
inline void Room_Info::set_room_maxnum(int32_t value) {
  _internal_set_room_maxnum(value);
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Room_Info.Room_Maxnum)
}

// int32 Room_Flag = 5;
inline void Room_Info::clear_room_flag() {
  _impl_.room_flag_ = 0;
}
inline int32_t Room_Info::_internal_room_flag() const {
  return _impl_.room_flag_;
}
inline int32_t Room_Info::room_flag() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Room_Info.Room_Flag)
  return _internal_room_flag();
}
inline void Room_Info::_internal_set_room_flag(int32_t value) {
  
  _impl_.room_flag_ = value;
}
inline void Room_Info::set_room_flag(int32_t value) {
  _internal_set_room_flag(value);
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Room_Info.Room_Flag)
}

// bytes Room_Pwd = 6;
inline void Room_Info::clear_room_pwd() {
  _impl_.room_pwd_.ClearToEmpty();
}
inline const std::string& Room_Info::room_pwd() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Room_Info.Room_Pwd)
  return _internal_room_pwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Room_Info::set_room_pwd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_pwd_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Room_Info.Room_Pwd)
}
inline std::string* Room_Info::mutable_room_pwd() {
  std::string* _s = _internal_mutable_room_pwd();
  // @@protoc_insertion_point(field_mutable:dafuwenprotobuf.Room_Info.Room_Pwd)
  return _s;
}
inline const std::string& Room_Info::_internal_room_pwd() const {
  return _impl_.room_pwd_.Get();
}
inline void Room_Info::_internal_set_room_pwd(const std::string& value) {
  
  _impl_.room_pwd_.Set(value, GetArenaForAllocation());
}
inline std::string* Room_Info::_internal_mutable_room_pwd() {
  
  return _impl_.room_pwd_.Mutable(GetArenaForAllocation());
}
inline std::string* Room_Info::release_room_pwd() {
  // @@protoc_insertion_point(field_release:dafuwenprotobuf.Room_Info.Room_Pwd)
  return _impl_.room_pwd_.Release();
}
inline void Room_Info::set_allocated_room_pwd(std::string* room_pwd) {
  if (room_pwd != nullptr) {
    
  } else {
    
  }
  _impl_.room_pwd_.SetAllocated(room_pwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_pwd_.IsDefault()) {
    _impl_.room_pwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dafuwenprotobuf.Room_Info.Room_Pwd)
}

// bytes Room_AesKey = 7;
inline void Room_Info::clear_room_aeskey() {
  _impl_.room_aeskey_.ClearToEmpty();
}
inline const std::string& Room_Info::room_aeskey() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Room_Info.Room_AesKey)
  return _internal_room_aeskey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Room_Info::set_room_aeskey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_aeskey_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Room_Info.Room_AesKey)
}
inline std::string* Room_Info::mutable_room_aeskey() {
  std::string* _s = _internal_mutable_room_aeskey();
  // @@protoc_insertion_point(field_mutable:dafuwenprotobuf.Room_Info.Room_AesKey)
  return _s;
}
inline const std::string& Room_Info::_internal_room_aeskey() const {
  return _impl_.room_aeskey_.Get();
}
inline void Room_Info::_internal_set_room_aeskey(const std::string& value) {
  
  _impl_.room_aeskey_.Set(value, GetArenaForAllocation());
}
inline std::string* Room_Info::_internal_mutable_room_aeskey() {
  
  return _impl_.room_aeskey_.Mutable(GetArenaForAllocation());
}
inline std::string* Room_Info::release_room_aeskey() {
  // @@protoc_insertion_point(field_release:dafuwenprotobuf.Room_Info.Room_AesKey)
  return _impl_.room_aeskey_.Release();
}
inline void Room_Info::set_allocated_room_aeskey(std::string* room_aeskey) {
  if (room_aeskey != nullptr) {
    
  } else {
    
  }
  _impl_.room_aeskey_.SetAllocated(room_aeskey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_aeskey_.IsDefault()) {
    _impl_.room_aeskey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dafuwenprotobuf.Room_Info.Room_AesKey)
}

// int32 Player_Order = 8;
inline void Room_Info::clear_player_order() {
  _impl_.player_order_ = 0;
}
inline int32_t Room_Info::_internal_player_order() const {
  return _impl_.player_order_;
}
inline int32_t Room_Info::player_order() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Room_Info.Player_Order)
  return _internal_player_order();
}
inline void Room_Info::_internal_set_player_order(int32_t value) {
  
  _impl_.player_order_ = value;
}
inline void Room_Info::set_player_order(int32_t value) {
  _internal_set_player_order(value);
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Room_Info.Player_Order)
}

// bytes Player_Name = 9;
inline void Room_Info::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
}
inline const std::string& Room_Info::player_name() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Room_Info.Player_Name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Room_Info::set_player_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Room_Info.Player_Name)
}
inline std::string* Room_Info::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:dafuwenprotobuf.Room_Info.Player_Name)
  return _s;
}
inline const std::string& Room_Info::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void Room_Info::_internal_set_player_name(const std::string& value) {
  
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Room_Info::_internal_mutable_player_name() {
  
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Room_Info::release_player_name() {
  // @@protoc_insertion_point(field_release:dafuwenprotobuf.Room_Info.Player_Name)
  return _impl_.player_name_.Release();
}
inline void Room_Info::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dafuwenprotobuf.Room_Info.Player_Name)
}

// int32 Player_TouxiangFlag = 10;
inline void Room_Info::clear_player_touxiangflag() {
  _impl_.player_touxiangflag_ = 0;
}
inline int32_t Room_Info::_internal_player_touxiangflag() const {
  return _impl_.player_touxiangflag_;
}
inline int32_t Room_Info::player_touxiangflag() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Room_Info.Player_TouxiangFlag)
  return _internal_player_touxiangflag();
}
inline void Room_Info::_internal_set_player_touxiangflag(int32_t value) {
  
  _impl_.player_touxiangflag_ = value;
}
inline void Room_Info::set_player_touxiangflag(int32_t value) {
  _internal_set_player_touxiangflag(value);
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Room_Info.Player_TouxiangFlag)
}

// int32 cfd = 11;
inline void Room_Info::clear_cfd() {
  _impl_.cfd_ = 0;
}
inline int32_t Room_Info::_internal_cfd() const {
  return _impl_.cfd_;
}
inline int32_t Room_Info::cfd() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Room_Info.cfd)
  return _internal_cfd();
}
inline void Room_Info::_internal_set_cfd(int32_t value) {
  
  _impl_.cfd_ = value;
}
inline void Room_Info::set_cfd(int32_t value) {
  _internal_set_cfd(value);
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Room_Info.cfd)
}

// bytes IP = 12;
inline void Room_Info::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& Room_Info::ip() const {
  // @@protoc_insertion_point(field_get:dafuwenprotobuf.Room_Info.IP)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Room_Info::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dafuwenprotobuf.Room_Info.IP)
}
inline std::string* Room_Info::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:dafuwenprotobuf.Room_Info.IP)
  return _s;
}
inline const std::string& Room_Info::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void Room_Info::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* Room_Info::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* Room_Info::release_ip() {
  // @@protoc_insertion_point(field_release:dafuwenprotobuf.Room_Info.IP)
  return _impl_.ip_.Release();
}
inline void Room_Info::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dafuwenprotobuf.Room_Info.IP)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dafuwenprotobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dafuwen_2eproto
